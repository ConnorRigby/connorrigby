<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elixir on cone.codes</title><link>https://cone.codes/tags/elixir/</link><description>Recent content in Elixir on cone.codes</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Creative Commons Attribution 4.0 International</copyright><lastBuildDate>Mon, 25 Mar 2024 17:36:33 -0600</lastBuildDate><atom:link href="https://cone.codes/tags/elixir/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating mesh networks with Nerves</title><link>https://cone.codes/posts/nerves-mesh/</link><pubDate>Mon, 25 Mar 2024 17:36:33 -0600</pubDate><guid>https://cone.codes/posts/nerves-mesh/</guid><description>TLDR Here&amp;rsquo;s the sample code. read on to get a breakdown.
defmodule MyAppFw.Mesh do require Logger def start_link do GenServer.start_link(__MODULE__, [], name: __MODULE__) end def init(_args) do VintageNet.subscribe([&amp;#34;interface&amp;#34;, &amp;#34;mesh0&amp;#34;]) {:ok, %{socket: nil, select: nil, node: nil}, {:continue, :init_mesh}} end def terminate(_, state) do if Node.alive? do for node &amp;lt;- Node.list(), do: Node.disconnect(node) Node.stop() end if state.socket, do: :socket.close(state.socket) VintageNet.reset_to_defaults(&amp;#34;mesh0&amp;#34;) end def handle_continue(:init_mesh, state) do :os.cmd(&amp;#39;ip link set wlan0 down&amp;#39;) VintageNet.configure(&amp;#34;mesh0&amp;#34;, %{ type: VintageNetWiFi, ipv4: %{method: :disabled}, vintage_net_wifi: %{ root_interface: &amp;#34;wlan0&amp;#34;, user_mpm: 1, networks: [ %{ ssid: &amp;#34;myapp&amp;#34;, key_mgmt: :none, mode: :mesh, frequency: 2412, } ], } }, persist: false) {:noreply, state} end def handle_continue(:recvfrom, state) do case :socket.</description><content>&lt;h2 id="tldr">TLDR&lt;/h2>
&lt;p>Here&amp;rsquo;s the sample code. read on to get a breakdown.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyAppFw.Mesh&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">require&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> start_link &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>start_link(__MODULE__, [], &lt;span style="color:#e6db74">name&lt;/span>: __MODULE__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> init(_args) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VintageNet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>subscribe([&lt;span style="color:#e6db74">&amp;#34;interface&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mesh0&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, %{&lt;span style="color:#e6db74">socket&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#e6db74">select&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#e6db74">node&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>}, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:init_mesh&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> terminate(_, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>alive? &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> node &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>list(), &lt;span style="color:#e6db74">do&lt;/span>: &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>disconnect(node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> state&lt;span style="color:#f92672">.&lt;/span>socket, &lt;span style="color:#e6db74">do&lt;/span>: &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>close(state&lt;span style="color:#f92672">.&lt;/span>socket)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VintageNet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>reset_to_defaults(&lt;span style="color:#e6db74">&amp;#34;mesh0&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_continue(&lt;span style="color:#e6db74">:init_mesh&lt;/span>, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>cmd(&lt;span style="color:#e6db74">&amp;#39;ip link set wlan0 down&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VintageNet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>configure(&lt;span style="color:#e6db74">&amp;#34;mesh0&amp;#34;&lt;/span>, %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">type&lt;/span>: &lt;span style="color:#a6e22e">VintageNetWiFi&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">ipv4&lt;/span>: %{&lt;span style="color:#e6db74">method&lt;/span>: &lt;span style="color:#e6db74">:disabled&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">vintage_net_wifi&lt;/span>: %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">root_interface&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;wlan0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">user_mpm&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">networks&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">ssid&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;myapp&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">key_mgmt&lt;/span>: &lt;span style="color:#e6db74">:none&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">mode&lt;/span>: &lt;span style="color:#e6db74">:mesh&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">frequency&lt;/span>: &lt;span style="color:#ae81ff">2412&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#e6db74">persist&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_continue(&lt;span style="color:#e6db74">:recvfrom&lt;/span>, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>recvfrom(state&lt;span style="color:#f92672">.&lt;/span>socket, [], &lt;span style="color:#e6db74">:nowait&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:select&lt;/span>, {&lt;span style="color:#e6db74">:select_info&lt;/span>, _tag, select}} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">select&lt;/span>: select})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">select&lt;/span>: select}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, {source, data}} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">source&lt;/span>: source, &lt;span style="color:#e6db74">data&lt;/span>: data})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">:inet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>parse_ipv6_address(&lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_charlist(data)) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, _addr} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>list() &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">connecting_node&lt;/span>: &lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>connect(&lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">already_connected&lt;/span>: &lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>warning(%{&lt;span style="color:#e6db74">unknown_data&lt;/span>: data})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:recvfrom&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_continue(&lt;span style="color:#e6db74">:sendto&lt;/span>, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;AH&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Nerves.Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>serial_number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&amp;lt;_&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, serial&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>, _&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&amp;gt;&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode16!(id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addr_sufix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode16(serial, &lt;span style="color:#e6db74">case&lt;/span>: &lt;span style="color:#e6db74">:lower&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_charlist() &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>chunk_every(&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>sendto(state&lt;span style="color:#f92672">.&lt;/span>socket, &lt;span style="color:#e6db74">&amp;#34;fd12:3456:789a:1::&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>addr_sufix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, %{&lt;span style="color:#e6db74">family&lt;/span>: &lt;span style="color:#e6db74">:inet6&lt;/span>, &lt;span style="color:#e6db74">port&lt;/span>: &lt;span style="color:#ae81ff">49999&lt;/span>, &lt;span style="color:#e6db74">addr&lt;/span>: {&lt;span style="color:#ae81ff">0xFF02&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x69&lt;/span>}}) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:error&lt;/span>, reason} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>error(%{&lt;span style="color:#e6db74">sendto&lt;/span>: reason})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:sendto&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_info({&lt;span style="color:#e6db74">:&amp;#34;$socket&amp;#34;&lt;/span>, socket, &lt;span style="color:#e6db74">:select&lt;/span>, select}, %{&lt;span style="color:#e6db74">socket&lt;/span>: socket, &lt;span style="color:#e6db74">select&lt;/span>: select} &lt;span style="color:#f92672">=&lt;/span> state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">select&lt;/span>: select})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">select&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>}, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:recvfrom&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_info({&lt;span style="color:#a6e22e">VintageNet&lt;/span>, [&lt;span style="color:#e6db74">&amp;#34;interface&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mesh0&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wifi&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;peers&amp;#34;&lt;/span>], _old, new, _}, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">peers&lt;/span>: new, &lt;span style="color:#e6db74">socket&lt;/span>: state&lt;span style="color:#f92672">.&lt;/span>socket})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:sendto&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_info({&lt;span style="color:#a6e22e">VintageNet&lt;/span>, [&lt;span style="color:#e6db74">&amp;#34;interface&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mesh0&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;lower_up&amp;#34;&lt;/span>], &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>, _}, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;AH&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Nerves.Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>serial_number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&amp;lt;_&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, serial&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>, _&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&amp;gt;&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode16!(id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addr_sufix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode16(serial, &lt;span style="color:#e6db74">case&lt;/span>: &lt;span style="color:#e6db74">:lower&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_charlist() &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>chunk_every(&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>cmd(&lt;span style="color:#e6db74">&amp;#39;ip addr add fd12:3456:789a:1::&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>addr_sufix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/48 dev mesh0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, socket} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">:inet6&lt;/span>, &lt;span style="color:#e6db74">:dgram&lt;/span>, &lt;span style="color:#e6db74">:udp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:socket&lt;/span>, &lt;span style="color:#e6db74">:bindtodevice&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;mesh0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:socket&lt;/span>, &lt;span style="color:#e6db74">:reuseport&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:socket&lt;/span>, &lt;span style="color:#e6db74">:reuseaddr&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:multicast_loop&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:multicast_hops&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, interface} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:net&lt;/span>&lt;span style="color:#f92672">.&lt;/span>if_name2index(&lt;span style="color:#e6db74">&amp;#39;mesh0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:multicast_if&lt;/span>, interface)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>bind(socket, %{&lt;span style="color:#e6db74">family&lt;/span>: &lt;span style="color:#e6db74">:inet6&lt;/span>, &lt;span style="color:#e6db74">port&lt;/span>: &lt;span style="color:#ae81ff">49999&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:add_membership&lt;/span>, %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">multiaddr&lt;/span>: {&lt;span style="color:#ae81ff">0xFF02&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x69&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">interface&lt;/span>: interface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, node} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>start(&lt;span style="color:#e6db74">:&amp;#34;myapp@fd12:3456:789a:1::&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>addr_sufix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>set_cookie(&lt;span style="color:#e6db74">:democookie&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">socket&lt;/span>: socket, &lt;span style="color:#e6db74">node&lt;/span>: node}, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:recvfrom&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_info({&lt;span style="color:#a6e22e">VintageNet&lt;/span>, _, _, _, _}, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="building-a-erlang-distribution-cluster-over-a-80211s-mesh-network">Building a Erlang Distribution Cluster Over a 802.11s Mesh Network&lt;/h2>
&lt;ul>
&lt;li>The goal: &lt;a href="https://www.erlang.org/doc/reference_manual/distributed.html">Distributed Erlang&lt;/a>&lt;/li>
&lt;li>The network: &lt;a href="https://en.wikipedia.org/wiki/IEEE_802.11s">802.11s Mesh&lt;/a>&lt;/li>
&lt;li>The IP Addresses: &lt;a href="https://en.wikipedia.org/wiki/IPv6">V6&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="required-hardware">Required Hardware&lt;/h2>
&lt;p>There are two specific pieces of hardware used in this project. These two parts are required, but should generally be applicable to any Nerves device with support for them. (most).&lt;/p>
&lt;h3 id="80211s-compatible-wifi">802.11S Compatible WiFi&lt;/h3>
&lt;p>This isn&amp;rsquo;t a &lt;em>new&lt;/em> standard by any means, but it&amp;rsquo;s not an old one either. Support for it exists in modern Linux kernel and userspace applications, but drivers often don&amp;rsquo;t implement it for one reason or another, or the hardware
simply does not support it. I found a lovely list of compatible devices at &lt;a href="https://github.com/phillymesh/802.11s-adapters">phillymesh/802.11s-adapters&lt;/a>. As seen in the cover photo, I&amp;rsquo;m using unbranded &amp;ldquo;802.11n&amp;rdquo; marked WiFi dongles that support it.&lt;/p>
&lt;h3 id="atecc508aatecc608a-crypto-module">ATECC508A/ATECC608A Crypto Module&lt;/h3>
&lt;p>This isn&amp;rsquo;t actually &lt;strong>required&lt;/strong>, it just solves a complicated problem of creating unique id numbers. The ATECC608A chip is responsible for providing a 48 unique serial number that we are going to use as a way of identifying nodes on the network.
This is a wide problem space with many solutions. This is just &lt;em>one&lt;/em> of them.&lt;/p>
&lt;h2 id="package-setup">Package Setup&lt;/h2>
&lt;p>Not much code needs to be written from scratch here. We&amp;rsquo;re mostly gluing pieces together. The first pieces we&amp;rsquo;ll look at is &lt;a href="https://github.com/nerves-networking/vintage_net">VintageNet&lt;/a> and &lt;a href="https://github.com/nerves-networking/vintage_net_wifi">VintageNetWiFi&lt;/a>.
These two libraries are going to be responsible for creating and managing the physical network.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VintageNet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>configure(&lt;span style="color:#e6db74">&amp;#34;mesh0&amp;#34;&lt;/span>, %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">type&lt;/span>: &lt;span style="color:#a6e22e">VintageNetWiFi&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">ipv4&lt;/span>: %{&lt;span style="color:#e6db74">method&lt;/span>: &lt;span style="color:#e6db74">:disabled&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">vintage_net_wifi&lt;/span>: %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">root_interface&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;wlan0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">user_mpm&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">networks&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">ssid&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;myapp&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">key_mgmt&lt;/span>: &lt;span style="color:#e6db74">:none&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">mode&lt;/span>: &lt;span style="color:#e6db74">:mesh&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">frequency&lt;/span>: &lt;span style="color:#ae81ff">2412&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#e6db74">persist&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This configures the root_interface &lt;code>wlan0&lt;/code>, which in my case happens to be a USB WiFi dongle into &lt;code>:mesh&lt;/code> mode. &lt;code>ipv4&lt;/code> is disabled. We&amp;rsquo;ll see why in just a second. We also set &lt;code>persist: false&lt;/code> to prevent VintageNet from saving this config and applying it at boot.
The reason for that is because internally, when the kernel registers the &lt;code>mesh0&lt;/code> interface, the order in which we bring the interface up is important. We want to first bring &lt;code>wlan0&lt;/code> down:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>cmd(&lt;span style="color:#e6db74">&amp;#39;ip link set wlan0 down&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then configure the mesh interface using the above &lt;code>configure/3&lt;/code> command which will internally call &lt;code>:os.cmd('ip link set mesh0 up')&lt;/code> and kick off the internal state management and &lt;code>wpa_supplicant&lt;/code>. With just these two commands, the mesh is now running.
When we run those two commands on two different nodes, we can check the current network with something like this at the IEX console:&lt;/p>
&lt;pre tabindex="0">&lt;code>iex()1&amp;gt; cmd(&amp;#34;iw dev mesh0 station dump&amp;#34;)
Station 1c:bf:ce:17:1d:7a (on mesh0)
inactive time: 770 ms
rx bytes: 2112019
rx packets: 30557
tx bytes: 280280
tx packets: 2789
tx retries: 158
tx failed: 3
rx drop misc: 15
signal: -35 dBm
signal avg: -35 dBm
Toffset: 18446744073682909240 us
tx bitrate: 72.2 MBit/s MCS 7 short GI
tx duration: 0 us
rx bitrate: 72.2 MBit/s MCS 7 short GI
rx duration: 0 us
expected throughput: 32.134Mbps
mesh llid: 0
mesh plid: 0
mesh plink: ESTAB
mesh airtime link metric: 249
mesh connected to gate: no
mesh connected to auth server: no
mesh local PS mode: ACTIVE
mesh peer PS mode: ACTIVE
mesh non-peer PS mode: ACTIVE
authorized: yes
authenticated: yes
associated: yes
preamble: long
WMM/WME: yes
MFP: no
TDLS peer: no
DTIM period: 2
beacon interval:1000
connected time: 13770 seconds
associated at [boottime]: 15037.896s
associated at: 1711397904710 ms
current time: 1711411674604 ms
&lt;/code>&lt;/pre>&lt;p>Now this is great, but there&amp;rsquo;s no way currently to communicate between these nodes. To make that happen, we &lt;strong>COULD&lt;/strong> try to come up with some algorithm to attempt to request an IP address from a DHCP server, if there isn&amp;rsquo;t one available start it etc etc. Or even run
an &lt;code>mdns&lt;/code> server and client on both devices, and attempt to discover eachother. But I&amp;rsquo;ve employed what I think is a much neater solution that allows for discovery of other nodes without the need for a central authority on IP addresses.&lt;/p>
&lt;p>This brings me to the other library we will use for this network: &lt;a href="https://github.com/nerves-hub/nerves_key">NervesKey&lt;/a>. I&amp;rsquo;ve already provisioned my keys, so I wont explain that here, but all I&amp;rsquo;ve done for this setup is run the &amp;ldquo;standard&amp;rdquo; config as outlined in the README of the NervesKey repo.&lt;/p>
&lt;p>This device communicates over the I2C bus. So to use the NervesKey library, we need to provide it with a &lt;code>transport&lt;/code> of sorts telling the library where to find our key on the bus.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">:ok&lt;/span>, i2c} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ATECC508A.Transport.I2C&lt;/span>&lt;span style="color:#f92672">.&lt;/span>init([&lt;span style="color:#e6db74">bus_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;i2c-0&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is where it is for my device. On Raspberry Pi for example, it&amp;rsquo;s usually on &lt;code>&amp;quot;i2c-1&amp;quot;&lt;/code> which is the default for the &lt;code>init&lt;/code> function.&lt;/p>
&lt;p>The ATECC chip can do a lot, but we only need one feature right now. the Device Serial number, and wwe get that with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>iex(&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span> {&lt;span style="color:#e6db74">:ok&lt;/span>, id} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">NervesKey.Config&lt;/span>&lt;span style="color:#f92672">.&lt;/span>device_sn(i2c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">:ok&lt;/span>, &amp;lt;&amp;lt;&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">35&lt;/span>, &lt;span style="color:#ae81ff">111&lt;/span>, &lt;span style="color:#ae81ff">68&lt;/span>, &lt;span style="color:#ae81ff">227&lt;/span>, &lt;span style="color:#ae81ff">198&lt;/span>, &lt;span style="color:#ae81ff">184&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">238&lt;/span>&amp;gt;&amp;gt;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice this id is in binary. We can turn it into something more readable with something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>iex(&lt;span style="color:#ae81ff">3&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode16(id, &lt;span style="color:#e6db74">case&lt;/span>: &lt;span style="color:#e6db74">:lower&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;01236f44e3c6b802ee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s actually a shortcut to the above operation that comes with Nerves.Runtime. We can use &lt;code>Nerves.Runtime.serial_number&lt;/code> to do all the above stuff for us if configured correctly. Now all we need to do is create an IPV6 address
and assign it to our mesh0 interface and the two nodes should be able to communicate.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;AH&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Nerves.Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>serial_number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&amp;lt;_&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, serial&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>, _&lt;span style="color:#f92672">::&lt;/span>binary&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&amp;gt;&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode16!(id) &lt;span style="color:#75715e"># isn&amp;#39;t it funny I used the shortcut then changed it back into binary anyway?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addr_sufix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode16(serial, &lt;span style="color:#e6db74">case&lt;/span>: &lt;span style="color:#e6db74">:lower&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_charlist() &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>chunk_every(&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I take the serial number and trim off the &lt;code>AH&lt;/code> &amp;ldquo;header&amp;rdquo; value. The first two bytes of the serial number encode the date manufacturing run of the device whose serial number is attached. These values are usually the same on this chip,
so we don&amp;rsquo;t really want to use them for our IPV6 address. Similarly, the very last byte of the serial number encodes &lt;strong>where&lt;/strong> the chip was made. This is almost always &lt;code>0xEE&lt;/code> and again, we don&amp;rsquo;t really want it in our IP address either.
This leaves 48 bits, or 6 bytes of values that will be unique for every device. Finally, I split that hex string every 4 characters and join by the &lt;code>:&lt;/code> to lazily create the ID part of our ipv6 address. Now we just need to assign it to
the interface with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>cmd(&lt;span style="color:#e6db74">&amp;#39;ip addr add fd12:3456:789a:1::&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>addr_sufix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/48 dev mesh0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now our nodes can directly communicate with eachother:&lt;/p>
&lt;pre tabindex="0">&lt;code>iex(1)&amp;gt; cmd(&amp;#34;ping fd12:3456:789a:1:0:6f44:e3c6:b802&amp;#34;)
PING fd12:3456:789a:1:0:6f44:e3c6:b802 (fd12:3456:789a:1:0:6f44:e3c6:b802): 56 data bytes
64 bytes from fd12:3456:789a:1:0:6f44:e3c6:b802: seq=0 ttl=64 time=0.885 ms
64 bytes from fd12:3456:789a:1:0:6f44:e3c6:b802: seq=1 ttl=64 time=1.305 ms
64 bytes from fd12:3456:789a:1:0:6f44:e3c6:b802: seq=2 ttl=64 time=0.968 ms
&lt;/code>&lt;/pre>&lt;p>And with direct communication, means we can setup Distributed Erlang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>iex(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span> {&lt;span style="color:#e6db74">:ok&lt;/span>, node} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>start(&lt;span style="color:#e6db74">:&amp;#34;myapp@fd12:3456:789a:1::&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>addr_sufix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iex(myapp&lt;span style="color:#a6e22e">@fd12&lt;/span>:&lt;span style="color:#ae81ff">3456&lt;/span>:&lt;span style="color:#ae81ff">789&lt;/span>a:&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>f44&lt;span style="color:#e6db74">:e3c6:b802&lt;/span>)&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>set_cookie(&lt;span style="color:#e6db74">:democookie&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iex(myapp&lt;span style="color:#a6e22e">@fd12&lt;/span>:&lt;span style="color:#ae81ff">3456&lt;/span>:&lt;span style="color:#ae81ff">789&lt;/span>a:&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>f44&lt;span style="color:#e6db74">:e3c6:b802&lt;/span>)&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>list()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#e6db74">:&amp;#34;myapp@fd12:3456:789a:1::e0f9:2f20:de47&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The one final thing we need before we automate this whole process is a method to discover nodes on the network when we connect. I accomplished this with a very simple UDP socket on a multicast address to exchange information.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">:ok&lt;/span>, socket} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">:inet6&lt;/span>, &lt;span style="color:#e6db74">:dgram&lt;/span>, &lt;span style="color:#e6db74">:udp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:socket&lt;/span>, &lt;span style="color:#e6db74">:bindtodevice&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;mesh0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:socket&lt;/span>, &lt;span style="color:#e6db74">:reuseport&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:socket&lt;/span>, &lt;span style="color:#e6db74">:reuseaddr&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:multicast_loop&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:multicast_hops&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">:ok&lt;/span>, interface} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:net&lt;/span>&lt;span style="color:#f92672">.&lt;/span>if_name2index(&lt;span style="color:#e6db74">&amp;#39;mesh0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:multicast_if&lt;/span>, interface)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>bind(socket, %{&lt;span style="color:#e6db74">family&lt;/span>: &lt;span style="color:#e6db74">:inet6&lt;/span>, &lt;span style="color:#e6db74">port&lt;/span>: &lt;span style="color:#ae81ff">49999&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>setopt(socket, &lt;span style="color:#e6db74">:ipv6&lt;/span>, &lt;span style="color:#e6db74">:add_membership&lt;/span>, %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">multiaddr&lt;/span>: {&lt;span style="color:#ae81ff">0xFF02&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x69&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">interface&lt;/span>: interface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>recvfrom(state&lt;span style="color:#f92672">.&lt;/span>socket, [], &lt;span style="color:#e6db74">:nowait&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates a socket on &lt;code>ff02::/8&lt;/code> and starts receiving packets on it. When we successfully join the mesh, we send our address on the socket with something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>sendto(state&lt;span style="color:#f92672">.&lt;/span>socket, &lt;span style="color:#e6db74">&amp;#34;fd12:3456:789a:1::&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>addr_sufix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, %{&lt;span style="color:#e6db74">family&lt;/span>: &lt;span style="color:#e6db74">:inet6&lt;/span>, &lt;span style="color:#e6db74">port&lt;/span>: &lt;span style="color:#ae81ff">49999&lt;/span>, &lt;span style="color:#e6db74">addr&lt;/span>: {&lt;span style="color:#ae81ff">0xFF02&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x69&lt;/span>}})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we receive this message on other nodes, attempt to connect to it like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">:socket&lt;/span>&lt;span style="color:#f92672">.&lt;/span>recvfrom(state&lt;span style="color:#f92672">.&lt;/span>socket, [], &lt;span style="color:#e6db74">:nowait&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:select&lt;/span>, {&lt;span style="color:#e6db74">:select_info&lt;/span>, _tag, select}} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">select&lt;/span>: select})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">select&lt;/span>: select}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, {source, data}} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">source&lt;/span>: source, &lt;span style="color:#e6db74">data&lt;/span>: data})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">:inet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>parse_ipv6_address(&lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_charlist(data)) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, _addr} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>list() &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">connecting_node&lt;/span>: &lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>connect(&lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>info(%{&lt;span style="color:#e6db74">already_connected&lt;/span>: &lt;span style="color:#e6db74">:&amp;#34;myapp@&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>data&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>warning(%{&lt;span style="color:#e6db74">unknown_data&lt;/span>: data})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state, {&lt;span style="color:#e6db74">:continue&lt;/span>, &lt;span style="color:#e6db74">:recvfrom&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which just tries to decode the data from the socket as a string&amp;rsquo;d ip address, and checks to see if our node is already connected. If not, attempt to connect to it.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Now wrap all of that up into a small GenServer process as shown in the begining, and it&amp;rsquo;s job-done. Now of course there are &lt;strong>many&lt;/strong> optimizations to be made from this starting point. in no particular order, some of the low hanging fruit is&lt;/p>
&lt;ul>
&lt;li>use a PSK on the mesh network. The network in this example is completely open. anyone who knows how could connect and mess things up, or even passively listen to packets.&lt;/li>
&lt;li>use the TLS Erlang distribution transport. The NervesKey hardware supports hardware enabled encryption and other related features. This would involve some SSL work but would encrypt the distribution network.&lt;/li>
&lt;li>monitor other nodes. This could be done to validate the network is working. Depends on the end use application, but probably good practice.&lt;/li>
&lt;li>bridge the mesh network with other links. ULA addresses aren&amp;rsquo;t meant to be exposed on the public ipv6 internet, but this same addressing strategy would also work for global addresses.&lt;/li>
&lt;li>smarter discovery protocol. MDNS, upnp or similar solutions may be easy to setup here.&lt;/li>
&lt;/ul></content></item><item><title>CAN Link Part 2</title><link>https://cone.codes/posts/can-link-pt-2/</link><pubDate>Fri, 08 Apr 2022 15:19:25 -0600</pubDate><guid>https://cone.codes/posts/can-link-pt-2/</guid><description>Last week, I closed with
I ordered a few OSD335X chips on Aliexpress. Tune back in next week to see if they show up or not.
Well, it&amp;rsquo;s next week, and my order got canceled. I ordered s&amp;rsquo;more from other places, and it was canceled. I Couldn&amp;rsquo;t even find anywhere that had a single SOM for me to buy. Best I could find was Minimum Order Quantity of 250 pieces. So I did what any reasonable person would do; Desoldered some from old, broken boards.</description><content>&lt;p>Last week, I closed with&lt;/p>
&lt;blockquote>
&lt;p>I ordered a few OSD335X chips on Aliexpress. Tune back in next week to see if they show up or not.&lt;/p>
&lt;/blockquote>
&lt;p>Well, it&amp;rsquo;s next week, and my order got canceled. I ordered s&amp;rsquo;more from other places, and it was canceled. I Couldn&amp;rsquo;t even find anywhere that had a &lt;em>single&lt;/em> SOM for me to buy. Best I could find was &lt;a href="https://en.wikipedia.org/wiki/MOQ">Minimum Order Quantity&lt;/a> of 250 pieces. So I did what any reasonable person would do; Desoldered some from old, broken boards.&lt;/p>
&lt;p>&lt;img alt="desoldered-som" src="https://media.discordapp.net/attachments/643947340453118019/961053924801011712/IMG_20220405_180317.jpg?width=759&amp;height=1012">.&lt;/p>
&lt;p>Then after sleeping on the idea of desoldering 10+ of these, I realized this probably isn&amp;rsquo;t the move for this project.&lt;/p>
&lt;p>As a side note&lt;/p>
&lt;blockquote>
&lt;p>FS: 1 (one) OSD3558-512M-BAS, slightly used $1000 OBO&lt;/p>
&lt;/blockquote>
&lt;p>So I had a look through &lt;a href="https://octopart.com/">Octopart&lt;/a>, and decided that this project was dumb and gave up.&lt;/p>
&lt;h2 id="redesigning-the-pcb">Redesigning the PCB&lt;/h2>
&lt;p>Then I made some coffee, sat down, and got to work redesigning the PCB for a &lt;a href="https://www.raspberrypi.com/products/compute-module-4/">Raspberry Pi Compute Module&lt;/a>. These are really cool modules, but not really specced for this application. They are obviously targeted at media applications, not industrial control protocols or much/any interaction with the outside world. Buuuut they do have one good thing going for them - I can get a few of them. Below is a table showing some of the important differences in the main CPUs.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">SOM&lt;/th>
&lt;th style="text-align:center">CPU Clock Speed&lt;/th>
&lt;th style="text-align:center">CPU Cores&lt;/th>
&lt;th style="text-align:center">RAM&lt;/th>
&lt;th style="text-align:center">Available PWM&lt;/th>
&lt;th style="text-align:center">USB Ports&lt;/th>
&lt;th style="text-align:center">Native CAN support&lt;/th>
&lt;th style="text-align:center">CSI (camera) ports&lt;/th>
&lt;th style="text-align:center">DSI (display) ports&lt;/th>
&lt;th style="text-align:center">HDMI ports&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">OSD335x&lt;/td>
&lt;td style="text-align:center">900 MHz&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">512MB&lt;/td>
&lt;td style="text-align:center">a lot&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">yes&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">CM4&lt;/td>
&lt;td style="text-align:center">1.4 GHz&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1-8 GB&lt;/td>
&lt;td style="text-align:center">2 (3 are required)&lt;/td>
&lt;td style="text-align:center">1 (2 were desired )&lt;/td>
&lt;td style="text-align:center">no (required)&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Soooo, while it technically is easier to obtain, the next issue is finding external components to do all the stuff I don&amp;rsquo;t need, notably CAN and RGB (the literal only requirements for this project).&lt;/p>
&lt;p>Irritated, I hopped back onto OctoPart and started component hunting. First up was something about the PWM issue. I had two ideas for this, so to prevent further redesigns I decided to lay out both, just in case. The most straightforward solution is using some sort of IO Expander chip. I knew of one right off the top of my head: &lt;a href="https://www.futureelectronics.com/p/semiconductors--analog--drivers--led-drivers-linear-mode/PCA9685PW-112-nxp-1019213?utm_source=octopart&amp;utm_medium=aggregator&amp;utm_campaign=crossref&amp;utm_term=PCA9685PW%2C112">NXP PCA9685PW,112&lt;/a>. It&amp;rsquo;s made specifically for controlling RGB LEDs via &lt;a href="https://en.wikipedia.org/wiki/I%C2%B2C">I²C&lt;/a>. Features include: &lt;a href="https://github.com/torvalds/linux/blob/master/drivers/pwm/pwm-pca9685.c">already having a driver in Linux&lt;/a> and being pretty straight forward to design around. Bad news is it&amp;rsquo;s really popular so I can&amp;rsquo;t find it anywhere. So, the backup then: &lt;a href="https://www.raspberrypi.com/products/raspberry-pi-pico/">A Raspberry Pi Pico&lt;/a>. I originally planned on using just the RP2040 chip, but you guessed it - out of stock. I connected it to the CM4 via I²C, and slapped it down on the board.&lt;/p>
&lt;p>The other missing main component is something that speaks &lt;a href="https://en.wikipedia.org/wiki/CAN_bus">CAN&lt;/a>. Again, I already had an idea for this as well. &lt;a href="https://www.microchip.com/en-us/product/MCP2515">The MCP2515&lt;/a>. It&amp;rsquo;s old, it&amp;rsquo;s not recommended for new designs, and I have a bunch of them in different packages on the shelf. Not much else to say about this chip other than because I have a bunch of them in 2 different packages, I plopped down a footprint for both of them on the board so I can just solder whichever without spinning a new board:&lt;/p>
&lt;p>&lt;img alt="MCP Dual footprints" src="https://media.discordapp.net/attachments/643947340453118019/961786045333119076/unknown.png">&lt;/p>
&lt;p>In the shot above, &lt;code>U8&lt;/code> and &lt;code>U5&lt;/code> are both a &lt;code>MCP2515&lt;/code>, just in two different packages. (also photo&amp;rsquo;d is the &lt;code>pca9685&lt;/code> chip above.)&lt;/p>
&lt;p>The other thing I tested this week was the &amp;ldquo;hack&amp;rdquo; of using a set of BSS138 N channel transistors to do the LED PWMing.&lt;/p>
&lt;p>&lt;img alt="BSS138 prototype" src="https://media.discordapp.net/attachments/643947340453118019/960593404012675132/IMG_20220404_113438.jpg?width=759&amp;height=1012">&lt;/p>
&lt;p>As it turns out, they are not suitable for this application. When I threw these prototype boards on my bench supply connected to the prototype, I managed to melt the transistor at 12V @ 2A. I &lt;strong>could&lt;/strong> just limit the brightness in software, but since I&amp;rsquo;m spinning the board anyway, I replaced them with a set of &lt;a href="https://en.wikipedia.org/wiki/MOSFET">Mosfets&lt;/a>.&lt;/p>
&lt;p>Finally, after about a day of rerouting and updating everything, I was left with the new PCB. The best part, 93% procurable component selection.&lt;/p>
&lt;p>&lt;img alt="octopart-bom" src="https://media.discordapp.net/attachments/957852929254113300/962089782127788072/unknown.png">&lt;/p>
&lt;p>&lt;img alt="rerouted-pcb-final" src="https://media.discordapp.net/attachments/957852929254113300/962088847506800690/unknown.png">&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>I&amp;rsquo;m not super happy that I had to go through all this, but for what it&amp;rsquo;s worth, using the CM4 module was &lt;em>very&lt;/em> easy, Even if it&amp;rsquo;s not the perfect selection. I really wanted to use the OSD335x chip since it&amp;rsquo;s a really cool chip, and has all the stuff I need built right into it. I&amp;rsquo;m sure I &lt;strong>could&lt;/strong> have hunted around for another SOM. Several come to mind, the OSD32MP1, Most of the IMX line, etc. But upon quick searches, they are all just as hard to get as the OS335x.
The other interesting part of all of this is that the BOM price actually went down by quite a bit. I wasn&amp;rsquo;t keeping super good track of this since most of the components I selected for the original design are out of stock and therefor artifically inflated in price. It&amp;rsquo;s kind of frustrating that it was easier to use something designed for set top boxes than it was to use something purpose built for my project but oh well.&lt;/p>
&lt;p>Tune back in next week to see if I give entirely for real this time.&lt;/p></content></item><item><title>Using PWM with Nerves</title><link>https://cone.codes/posts/nerves-pwm/</link><pubDate>Mon, 04 Apr 2022 19:07:10 -0600</pubDate><guid>https://cone.codes/posts/nerves-pwm/</guid><description>TLDR This is probably what you need. Take it and modify it as you see fit.
defmodule MyAPP.PWM do @moduledoc &amp;#34;&amp;#34;&amp;#34; Basic control pwm: ehrpwm1A == pwmchip2/pwm0 (LED R) ehrpwm1B == pwmchip2/pwm1 (LED G) ehrpwm2A == pwmchip0/pwm0 (LED B) &amp;#34;&amp;#34;&amp;#34; @pwms [ led_r: {2, 0}, led_g: {2, 1}, led_b: {0, 0}, ] # Period for 25kHz PWM @period 40_000 def init() do @pwms |&amp;gt; Enum.each(fn {_pwm, {chip, pin}} -&amp;gt; File.write(&amp;#34;/sys/class/pwm/pwmchip#{chip}/export&amp;#34;, to_string(pin)) File.</description><content>&lt;h2 id="tldr">TLDR&lt;/h2>
&lt;p>This is probably what you need. Take it and modify it as you see fit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyAPP.PWM&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Basic control
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pwm:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ehrpwm1A == pwmchip2/pwm0 (LED R)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ehrpwm1B == pwmchip2/pwm1 (LED G)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ehrpwm2A == pwmchip0/pwm0 (LED B)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@pwms&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">led_r&lt;/span>: {&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">led_g&lt;/span>: {&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">led_b&lt;/span>: {&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Period for 25kHz PWM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@period&lt;/span> &lt;span style="color:#ae81ff">40_000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> init() &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@pwms&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#66d9ef">fn&lt;/span> {_pwm, {chip, pin}} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/export&amp;#34;&lt;/span>, to_string(pin))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/period&amp;#34;&lt;/span>, to_string(&lt;span style="color:#a6e22e">@period&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> period(pwm, period) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {chip, pwm} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>fetch!(&lt;span style="color:#a6e22e">@pwms&lt;/span>, pwm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pwm&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/period&amp;#34;&lt;/span>, to_string(period))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> period(pwm) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {chip, pwm} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>fetch!(&lt;span style="color:#a6e22e">@pwms&lt;/span>, pwm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>read!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pwm&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/period&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>trim()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_integer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> duty_cycle(pwm, duty_cycle) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {chip, pwm} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>fetch!(&lt;span style="color:#a6e22e">@pwms&lt;/span>, pwm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pwm&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/duty_cycle&amp;#34;&lt;/span>, to_string(duty_cycle))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> duty_cycle(pwm) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {chip, pwm} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>fetch!(&lt;span style="color:#a6e22e">@pwms&lt;/span>, pwm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>read!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pwm&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/duty_cycle&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>trim()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to_integer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> enable(pwm, enable) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {chip, pwm} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>fetch!(&lt;span style="color:#a6e22e">@pwms&lt;/span>, pwm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> enable, &lt;span style="color:#e6db74">do&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">else&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pwm&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/enable&amp;#34;&lt;/span>, to_string(enable))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> enable(pwm) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {chip, pwm} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>fetch!(&lt;span style="color:#a6e22e">@pwms&lt;/span>, pwm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>read!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchip&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>chip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/pwm&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pwm&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/enable&amp;#34;&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>trim()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pwm-in-linux">PWM In Linux&lt;/h2>
&lt;p>I&amp;rsquo;ve always found using PWM in Linux unnecessarily tedious. When I first got started in Embedded Linux, I was coming from experience with Arduino. Love it or hate it, Arduino has this particular feature dialed in from the beginning.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pinMode&lt;/span>(A0, OUTPUT);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">analogWrite&lt;/span>(A0, &lt;span style="color:#ae81ff">255&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it.&lt;/p>
&lt;p>Okay, so obviously it&amp;rsquo;s not a completely fair comparison, Arduino is a C++ framework, Linux is an operating system yada yada. Anyway here&amp;rsquo;s the snippit from the &lt;a href="https://www.kernel.org/doc/html/latest/driver-api/pwm.html">Linux
Kernel Documentation&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> pwm_lookup board_pwm_lookup[] &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PWM_LOOKUP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tegra-pwm&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pwm-backlight&amp;#34;&lt;/span>, NULL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">50000&lt;/span>, PWM_POLARITY_NORMAL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> __init &lt;span style="color:#a6e22e">board_init&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pwm_add_table&lt;/span>(board_pwm_lookup, &lt;span style="color:#a6e22e">ARRAY_SIZE&lt;/span>(board_pwm_lookup));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alright &lt;strong>what?&lt;/strong> So as it turns out that part of the document is completely irelevant to actually &lt;em>using&lt;/em> PWM. If you read down further, you&amp;rsquo;ll find&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">pwm_apply_state&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> pwm_device &lt;span style="color:#f92672">*&lt;/span>pwm, &lt;span style="color:#66d9ef">struct&lt;/span> pwm_state &lt;span style="color:#f92672">*&lt;/span>state);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>after no less than 7 links to other functions you need to call first. Continue reading on, and oh! Linux will let you use PWM via &lt;a href="https://en.wikipedia.org/wiki/Sysfs">Sysfs&lt;/a>, just like GPIO and many other systems. The document however won&amp;rsquo;t tell you exactly how to use that interface directly, you&amp;rsquo;ll have to actually &lt;em>read&lt;/em> the document. This upset me, so here&amp;rsquo;s something you can copy and paste.&lt;/p>
&lt;p>The root directory you want to be in is &lt;code>/sys/class/pwm&lt;/code>. To use a PWM output, you&amp;rsquo;ll need to &lt;code>export&lt;/code> it. (replace &lt;code>N&lt;/code> with your PWM chip, and &lt;code>C&lt;/code> with the channel)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">1&lt;/span> &amp;gt; /sys/class/pwm/pwmchipN/export
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Elixir, we can do&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchipN/export&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, it must be enabled:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">1&lt;/span> &amp;gt; /sys/class/pwm/pwmchipN/enable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And you know the deal in Elixir:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchipN/export&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, you need to set the &lt;code>period&lt;/code> and &lt;code>duty_cycle&lt;/code>. If you don&amp;rsquo;t know what these are, (possibly because you came here from Arduino that doesn&amp;rsquo;t tell you anything about either of these two words), Check &lt;a href="https://en.wikipedia.org/wiki/Pulse-width_modulation">Wikipedia&lt;/a>.&lt;/p>
&lt;p>The short of it is, &lt;code>duty_cycle&lt;/code> is the percentage of time that the signal is active. &lt;code>period&lt;/code> is how long that signal is active. The values provided to Linux are in nanoseconds, so to set a 1 millisecond period, you would do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">1000000&lt;/span> &amp;gt; /sys/class/pwm/pwmchipN/pwmC/period
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or in Elixir:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchipN/pwmC/period&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1000000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And to set the a duty cycle of 50%, you&amp;rsquo;d set the &lt;code>duty_cycle&lt;/code> to half of the &lt;code>period&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">500000&lt;/span> &amp;gt; /sys/class/pwm/pwmchipN/pwmC/duty_cycle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or in Elixir:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>write!(&lt;span style="color:#e6db74">&amp;#34;/sys/class/pwm/pwmchipN/pwmC/duty_cycle&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;500000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s pretty much it. I encourage you to study the official document further, it may be a little dense, but all the information you need &lt;em>is&lt;/em> there. Hopefully this helped someone along their way to controlling something interesting with PWM.&lt;/p>
&lt;h2 id="bonus-round-rgb-led-control">Bonus Round: RGB LED control&lt;/h2>
&lt;p>The entire reason, I had to learn this information was to control RGB LEDs for a &lt;a href="https://cone.codes/posts/can-link/">device I&amp;rsquo;m building&lt;/a> to control LEDs based on an engine control unit. This is what I use for that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.RGB&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.PWM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">GenServer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">require&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@all_channels&lt;/span> [&lt;span style="color:#e6db74">:led_r&lt;/span>, &lt;span style="color:#e6db74">:led_g&lt;/span>, &lt;span style="color:#e6db74">:led_b&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> start_link(opts) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>start_link(__MODULE__, opts, &lt;span style="color:#e6db74">name&lt;/span>: __MODULE__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> on() &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>call(__MODULE__, &lt;span style="color:#e6db74">:on&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> off() &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>call(__MODULE__, &lt;span style="color:#e6db74">:off&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> set_color(val) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>call(__MODULE__, {&lt;span style="color:#e6db74">:set_color&lt;/span>, val})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> set_brightness(val) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>call(__MODULE__, {&lt;span style="color:#e6db74">:set_brightness&lt;/span>, val})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> init(_opts) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@all_channels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#66d9ef">fn&lt;/span> channel &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PWM&lt;/span>&lt;span style="color:#f92672">.&lt;/span>enable(channel, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">color&lt;/span>: &lt;span style="color:#e6db74">:white&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">brightness&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_call(&lt;span style="color:#e6db74">:on&lt;/span>, _from, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set(state&lt;span style="color:#f92672">.&lt;/span>color, state&lt;span style="color:#f92672">.&lt;/span>brightness)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@all_channels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#66d9ef">fn&lt;/span> channel &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PWM&lt;/span>&lt;span style="color:#f92672">.&lt;/span>enable(channel, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:reply&lt;/span>, &lt;span style="color:#e6db74">:ok&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_call(&lt;span style="color:#e6db74">:off&lt;/span>, _from, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@all_channels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#66d9ef">fn&lt;/span> channel &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PWM&lt;/span>&lt;span style="color:#f92672">.&lt;/span>enable(channel, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:reply&lt;/span>, &lt;span style="color:#e6db74">:ok&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_call({&lt;span style="color:#e6db74">:set_color&lt;/span>, val}, _from, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set(val, state&lt;span style="color:#f92672">.&lt;/span>brightness)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:reply&lt;/span>, &lt;span style="color:#e6db74">:ok&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">color&lt;/span>: val}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_call({&lt;span style="color:#e6db74">:set_brightness&lt;/span>, val}, _from, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set(state&lt;span style="color:#f92672">.&lt;/span>color, val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:reply&lt;/span>, &lt;span style="color:#e6db74">:ok&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">brightness&lt;/span>: val}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defp&lt;/span> set(color, brightness) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rgb_val &lt;span style="color:#f92672">=&lt;/span> rgb_from_color(color, brightness)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>zip([&lt;span style="color:#e6db74">:led_r&lt;/span>, &lt;span style="color:#e6db74">:led_g&lt;/span>, &lt;span style="color:#e6db74">:led_b&lt;/span>], rgb_val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#66d9ef">fn&lt;/span> {channel, val} &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> duty_cycle &lt;span style="color:#f92672">=&lt;/span> floor(&lt;span style="color:#a6e22e">PWM&lt;/span>&lt;span style="color:#f92672">.&lt;/span>period(channel) &lt;span style="color:#f92672">*&lt;/span> val &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PWM&lt;/span>&lt;span style="color:#f92672">.&lt;/span>duty_cycle(channel, duty_cycle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defp&lt;/span> rgb_from_color(val, brightness) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> brightness &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> val &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:white&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [max, max, max]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:red&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [max, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:green&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>, max, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:blue&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, max]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:yellow&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [max, max, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:cyan&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>, max, max]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:magenta&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [max, &lt;span style="color:#ae81ff">0&lt;/span>, max]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {r, g, b} &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [r, g, b]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [r, g, b] &lt;span style="color:#f92672">-&amp;gt;&lt;/span> [r, g, b]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>CAN Link</title><link>https://cone.codes/posts/can-link/</link><pubDate>Fri, 01 Apr 2022 23:17:51 -0600</pubDate><guid>https://cone.codes/posts/can-link/</guid><description>I&amp;rsquo;ve been working on an idea off and on for the last year or so, and it&amp;rsquo;s finally culminated into a real thing that exists. What I want is a device that can interface an aftermarket ECU in my car, and mesh network with other nodes to syncronize RGB LEDs. This is of course a silly idea and would not make a real sustainable product or business, but I think it&amp;rsquo;s fun.</description><content>&lt;p>I&amp;rsquo;ve been working on an idea off and on for the last year or so, and it&amp;rsquo;s finally culminated
into a real thing that exists. What I want is a device that can interface an aftermarket
&lt;a href="https://en.wikipedia.org/wiki/Electronic_control_unit">ECU&lt;/a> in my car, and mesh network with
other nodes to syncronize RGB LEDs. This is of course a silly idea and would not make a real
sustainable product or business, but I think it&amp;rsquo;s fun.&lt;/p>
&lt;p>Like I said, I&amp;rsquo;ve been working on this for quite a while, so there&amp;rsquo;s quite a bit to catch up
on. Instead of blabbing about the software (which will be blabbed about in the future), I&amp;rsquo;m
gonna write up a quick summary of my experience doing an entire PCB &amp;ldquo;from scratch&amp;rdquo;, since that&amp;rsquo;s
the most recent portion of the project I&amp;rsquo;ve completed.&lt;/p>
&lt;h2 id="designing-pcb-for-nerves-firmware">Designing PCB for Nerves Firmware&lt;/h2>
&lt;p>I picked the BeagleBoneBlue as my development board because it had &lt;em>almost&lt;/em> all the stuff I
wanted for the final design. It also uses the &lt;a href="https://octavosystems.com/octavo_products/osd335x/">OSD335x&lt;/a> CPU, which is a very well supported device in the Nerves world. I
use it for my current work product, I&amp;rsquo;ve worked with other companies using Nerves that use it,
etc.&lt;/p>
&lt;p>The first step (after making a prototype ofc) was to make the schematic. Another reason I picked
this devboard was beause of how simple it is. The entire schematic is 5 pages long, and fits
into a single PDF. &lt;a href="https://github.com/beagleboard/beaglebone-blue/blob/9812bd927a0157a0a326debb858e36678e6eed64/BeagleBone_Blue_sch.pdf">Here it is&lt;/a>.
I &lt;a href="https://github.com/miata-bot/can-link/commit/69d136ebbe92c61059c85afc6919afc3817271a1">tricked a friend of mine into importing it into kicad&lt;/a> for me, then got to modifying it.&lt;/p>
&lt;h2 id="the-schematic">The Schematic&lt;/h2>
&lt;p>&lt;img alt="schematic" src="https://media.discordapp.net/attachments/643947340453118019/958716169408352256/unknown.png?width=2160&amp;height=864">&lt;/p>
&lt;p>The easy part was removing things I didn&amp;rsquo;t need:&lt;/p>
&lt;ul>
&lt;li>EMMC - I plan on using an SD card for this. It&amp;rsquo;s just easier.&lt;/li>
&lt;li>GPIO connectors - I wanted to keep these, but routing was just too hard for me.&lt;/li>
&lt;li>Motor controllers - No motor to control&lt;/li>
&lt;/ul>
&lt;p>Next up was to change out some parts:&lt;/p>
&lt;ul>
&lt;li>Barrel jack changed for a somewhat standard connector used by many aftermarket ECUs.&lt;/li>
&lt;li>USB Mini changed out for a USB C connector - this port is used for firmware debugging&lt;/li>
&lt;li>USB A changed out for USB B - this port is used for a mass storage gadget&lt;/li>
&lt;li>Battery connector changed out for one that I happen to have.&lt;/li>
&lt;li>Changed all the passives out for bigger packages. This was because I&amp;rsquo;m hand soldering it.&lt;/li>
&lt;/ul>
&lt;p>And finally I added some parts:&lt;/p>
&lt;ul>
&lt;li>JST connector for GPS modules&lt;/li>
&lt;li>3 Mosfets - used for PWMing the RGB LEDs&lt;/li>
&lt;li>RF69 Packet radio - used for syncing devices without internet&lt;/li>
&lt;li>TAG Connect serial console - used for firmware debugging&lt;/li>
&lt;/ul>
&lt;p>And that&amp;rsquo;s it. Pretty much everything else was a standard BeagleBone Blue. I moved some pins
during routing after consulting the datasheet.&lt;/p>
&lt;h2 id="the-layout">The Layout&lt;/h2>
&lt;p>After the schematic was mostly together, next up was to lay all the components out. I picked 0603 and 0805 size packages for everything, and laid all the components on the top side. I&amp;rsquo;m no expert so anyone with real experience in Electrical Engineering will probably have something to say. I guess here is a good place to put: if you, the reader use this for something and it doesn&amp;rsquo;t work; sorry and also I&amp;rsquo;m not responsible for whatever happens.&lt;/p>
&lt;p>I started out with just plopping everything down.&lt;/p>
&lt;p>&lt;img alt="layout" src="https://media.discordapp.net/attachments/643947340453118019/958094663275925524/unknown.png">.&lt;/p>
&lt;p>The first goal was to make sure I have 3d models for every part. I know it seems overkill, but it
just helps me with part placement to be able to visualize things. Kicad&amp;rsquo;s 3d viewer is pretty good once you get the models loaded. If you don&amp;rsquo;t do this, you really should.&lt;/p>
&lt;p>Next I sorted the components out into their respective &amp;ldquo;systems&amp;rdquo;. Decoupling caps per device, pullup/pulldown resistors in some sort of structure, power components, radio, connectors etc.
The goal here is to make sure there&amp;rsquo;s room on the board for everything and to start thinking of everything in relationship to the other components. A good layout here is going to pay off later when it comes to routing.&lt;/p>
&lt;p>&lt;img alt="layout-progress" src="https://media.discordapp.net/attachments/643947340453118019/958814194273243146/unknown.png">&lt;/p>
&lt;p>What happens next is sort of non-linear. I pretty much just arbitrarily started pecking around
the design, juggling parts around into the correct general shape so it can be moved around as a unit. I didn&amp;rsquo;t have an requirements for where anything should go, which was sort of hard for me to reason about, so I just started assembling sections into blocks.&lt;/p>
&lt;p>&lt;img alt="layout-progress" src="https://media.discordapp.net/attachments/643947340453118019/958883714396487722/unknown.png">&lt;/p>
&lt;p>The general layout started to take place at this point. The WiFi module was laid out and placed permenantly at the edge of the board. The RF69 radio goes right under it.
Right around this point is when I put some serious thought into how the device should look and
feel when it exists in the real world. I moved the connectors around, made cardboard boxes in about the same shape, etc. Just to see how it would feel to actually use.&lt;/p>
&lt;p>Eventually, I decided that the USB and CAN interfaces should be on the right. This is where power
and CAN signal are provided to the board. Technically, that is all that is required to run the device.&lt;/p>
&lt;p>&lt;img alt="connectors" src="https://cdn.discordapp.com/attachments/643947340453118019/959123883582169098/unknown.png">&lt;/p>
&lt;h2 id="the-routing">The Routing&lt;/h2>
&lt;p>After all the main systems were layed out on the board, it was time to route the board. This is
the second BGA package I&amp;rsquo;ve fanned out, and this one was far larger than the last. I did what
I think is an okay job. I&amp;rsquo;m certain it could be improved, and I&amp;rsquo;m sure one day I will think this
is the worst thing ever. I ended up removing a bunch of extra stuff I wanted, but didn&amp;rsquo;t need.
Notably, GPIO connectors, extra buttons and extra LEDs. This is the gist of what I came up with for
fanning the package out.&lt;/p>
&lt;p>&lt;img alt="fanout" src="https://media.discordapp.net/attachments/643947340453118019/959291652126679080/unknown.png">&lt;/p>
&lt;p>While working on that, I took breaks to do other sections that could be built independently.
The WiFi / Bluetooth module was a particularly neat one.&lt;/p>
&lt;p>&lt;img alt="bluetooth-layout" src="https://media.discordapp.net/attachments/643947340453118019/959184408865284156/unknown.png">&lt;/p>
&lt;p>Once I got all the tracks out of the BGA, all that was left was to shuffle all the signals
to where they needed to go. If I were to do it over again, I&amp;rsquo;d move the SD Card over to the right
side of the board. I originally put the SD Card on the top of the board thinking I could fan the
MMC pins that direction. I don&amp;rsquo;t remember exactly why i couldn&amp;rsquo;t, but I think it was because
of the big power pours.&lt;/p>
&lt;p>This is pretty much the final layout and routing.&lt;/p>
&lt;p>&lt;img alt="final-layout-routing" src="https://media.discordapp.net/attachments/643947340453118019/959527063302307960/unknown.png">&lt;/p>
&lt;p>Lastly, I sprinkled some text, a logo, and connector descriptions onto the silkscreen.&lt;/p>
&lt;p>&lt;img alt="final-pcb-model" src="https://media.discordapp.net/attachments/957852929254113300/959576291563163708/unknown.png">&lt;/p>
&lt;p>And that&amp;rsquo;s pretty much as far as I got this weekend. Next up is to pick out each of the individual components.
One notable issue with that is there&amp;rsquo;s this whole global chip shortage thing..&lt;/p>
&lt;p>&lt;img alt="chip-shortage" src="https://media.discordapp.net/attachments/643947340453118019/959626650935517194/unknown.png?width=2160&amp;height=144">&lt;/p>
&lt;p>I ordered a few OSD335X chips on Aliexpress. Tune back in next week to see if they show up or not.&lt;/p></content></item><item><title>Encrypted SQLite With Ecto</title><link>https://cone.codes/posts/encrypted-sqlite-with-ecto/</link><pubDate>Fri, 21 Jan 2022 14:36:40 -0700</pubDate><guid>https://cone.codes/posts/encrypted-sqlite-with-ecto/</guid><description>TLDR Compiling SQLCipher:
./configure \ --enable-tempstore=yes \ --disable-tcl \ --enable-shared \ CFLAGS=&amp;#34;-DSQLITE_HAS_CODEC -DSQLITE_THREADSAFE=1 -DSQLITE_USE_URI=1 -DSQLITE_LIKE_DOESNT_MATCH_BLOBS=1 -DSQLITE_DQS=0 -DHAVE_USLEEP=1 -DALLOW_COVERING_INDEX_SCAN=1 -DENABLE_FTS3_PARENTHESIS=1 -DENABLE_LOAD_EXTENSION=1 -DENABLE_SOUNDEX=1 -DENABLE_STAT4=1 -DENABLE_UPDATE_DELETE_LIMIT=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_GEOPOLY=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1 -DSQLITE_ENABLE_RBU=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_OMIT_DEPRECATED=1&amp;#34; \ LDFLAGS=&amp;#34;-lcrypto&amp;#34; Encrypting SQLite Databases SQLite is one of my favorite pieces of software in the world. It&amp;rsquo;s used in millions of projects and devices. One issue with the official public version of it is that there is no support for encryption natively.</description><content>&lt;h1 id="tldr">TLDR&lt;/h1>
&lt;p>Compiling SQLCipher:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./configure &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --enable-tempstore&lt;span style="color:#f92672">=&lt;/span>yes &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --disable-tcl &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --enable-shared &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> CFLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-DSQLITE_HAS_CODEC -DSQLITE_THREADSAFE=1 -DSQLITE_USE_URI=1 -DSQLITE_LIKE_DOESNT_MATCH_BLOBS=1 -DSQLITE_DQS=0 -DHAVE_USLEEP=1 -DALLOW_COVERING_INDEX_SCAN=1 -DENABLE_FTS3_PARENTHESIS=1 -DENABLE_LOAD_EXTENSION=1 -DENABLE_SOUNDEX=1 -DENABLE_STAT4=1 -DENABLE_UPDATE_DELETE_LIMIT=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_GEOPOLY=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1 -DSQLITE_ENABLE_RBU=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_OMIT_DEPRECATED=1&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> LDFLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-lcrypto&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="encrypting-sqlite-databases">Encrypting SQLite Databases&lt;/h1>
&lt;p>SQLite is one of my favorite pieces of software in the world. It&amp;rsquo;s used in millions
of projects and devices. One issue with the official public version of it is that
there is no support for encryption natively. The primary decision for this seems to be
for monetizing the work of the developers.&lt;/p>
&lt;p>What this means is that to encrypt your SQLite database, you actually have to recompile
the entire engine from source, with licensed files. You can read more about the
official SQLite encryption &lt;a href="https://www.sqlite.org/see/doc/trunk/www/readme.wiki">on the official website&lt;/a>&lt;/p>
&lt;p>An alternative option to SQLite encryption that is free and open source is &lt;a href="https://www.zetetic.net/sqlcipher/">SQLCipher&lt;/a>.
It implements a similar API and to the offical SEE release, and also requires you to compile the engine from source.&lt;/p>
&lt;h2 id="compiling-sqlcipher">Compiling SQLCipher&lt;/h2>
&lt;p>This is the most time consuming part of the process. Luckily it only needs to be done once.&lt;/p>
&lt;pre>&lt;code>NOTE: this is specifically for your development environment. Compiling for production
*may* look the same to you, but it may not. This is specifically a problem for Nerves
which I will write a follow-up post about in the future.
&lt;/code>&lt;/pre>
&lt;p>The first step for compiling SQLCipher is getting the source. I chose to use the latest tagged release,
a git clone will work the same.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/sqlcipher/sqlcipher/archive/refs/tags/v4.5.0.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar xzf v4.5.0.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd sqlcipher-4.5.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next up, use autotools to configure the build. These are the settings I suggest starting with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./configure &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --enable-tempstore&lt;span style="color:#f92672">=&lt;/span>yes &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --disable-tcl &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --enable-shared &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> CFLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-DSQLITE_HAS_CODEC -DSQLITE_THREADSAFE=1 -DSQLITE_USE_URI=1 -DSQLITE_LIKE_DOESNT_MATCH_BLOBS=1 -DSQLITE_DQS=0 -DHAVE_USLEEP=1 -DALLOW_COVERING_INDEX_SCAN=1 -DENABLE_FTS3_PARENTHESIS=1 -DENABLE_LOAD_EXTENSION=1 -DENABLE_SOUNDEX=1 -DENABLE_STAT4=1 -DENABLE_UPDATE_DELETE_LIMIT=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_GEOPOLY=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1 -DSQLITE_ENABLE_RBU=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_OMIT_DEPRECATED=1&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> LDFLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-lcrypto&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally, you just need to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># May require root permissions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup-with-ecto">Setup with Ecto&lt;/h2>
&lt;p>Right before this post went live, I submitted two PRs to the Elixir SQLite driver:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/elixir-sqlite/exqlite/pull/186">https://github.com/elixir-sqlite/exqlite/pull/186&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/elixir-sqlite/exqlite/pull/187">https://github.com/elixir-sqlite/exqlite/pull/187&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The first allows for using externally compiled SQLite engine. This is required to use our
previously compiled SQLCipher engine.&lt;/p>
&lt;p>The second allows for setting the &lt;code>KEY&lt;/code> PRAGMA value. This is what SQLite SEE and SQLCipher
both use to decrypt data. It must be supplied before &lt;em>any&lt;/em> of the SQLite database will be
accessable.&lt;/p>
&lt;p>To have access to these new features, you will need to update to the latest version of &lt;code>exqlite&lt;/code>.
Add &lt;code>{:exqlite &amp;quot;~&amp;gt; 0.9&amp;quot;}&lt;/code> to your project, or simply update it with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mix deps.update exqlite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To get &lt;code>exqlite&lt;/code> to use our SQLCipher installation, you need to export a handful of environment variables:&lt;/p>
&lt;pre tabindex="0">&lt;code># tell exqlite that we wish to use some other sqlite installation. this will prevent sqlite3.c and friends from compiling
export EXQLITE_USE_SYSTEM=1
# Tell exqlite where to find the `sqlite3.h` file
export EXQLITE_SYSTEM_CFLAGS=-I/usr/local/include/sqlcipher
# tell exqlite which sqlite implementation to use
export EXQLITE_SYSTEM_LDFLAGS=-L/usr/local/lib -lsqlcipher
&lt;/code>&lt;/pre>&lt;p>do a recompile with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mix deps.compile exqlite --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Almost done, the only other thing you have to do is supply a &lt;code>key&lt;/code> to the config. In &lt;code>config.exs&lt;/code> you can do something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>config &lt;span style="color:#e6db74">:my_app&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">ecto_repos&lt;/span>: [&lt;span style="color:#a6e22e">MyApp.Repo&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config &lt;span style="color:#e6db74">:my_app&lt;/span>, &lt;span style="color:#a6e22e">MyApp.Repo&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">database&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;path/to/my/database.db&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">key&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test123&amp;#34;&lt;/span> &lt;span style="color:#75715e"># add this line&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it! Your data is now encrypted using the key provided.&lt;/p></content></item><item><title>IEx in a Box</title><link>https://cone.codes/posts/iex-in-a-box/</link><pubDate>Wed, 19 Jan 2022 14:23:02 -0700</pubDate><guid>https://cone.codes/posts/iex-in-a-box/</guid><description>TLDR Here&amp;rsquo;s the code you probably want. Modify it as you see fit.
# filename: lib/my_firmware/endpoint.ex defmodule MyFirmware.Endpoint do use Plug.Router plug(Plug.Static, from: :my_firmware, at: &amp;#34;/public&amp;#34;) plug(:match) plug(:dispatch) get &amp;#34;/console&amp;#34; do html = &amp;#34;&amp;#34;&amp;#34; &amp;lt;!DOCTYPE html PUBLIC&amp;#34;-//W3C//DTD XHTML 1.0 Strict//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;#34;&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta content=&amp;#34;text/html;charset=utf-8&amp;#34; http-equiv=&amp;#34;Content-Type&amp;#34;&amp;gt; &amp;lt;meta content=&amp;#34;utf-8&amp;#34; http-equiv=&amp;#34;encoding&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/public/app.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;terminal&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;/public/app.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;#34;&amp;#34;&amp;#34; send_resp(conn, 200, html) end match _ do send_resp(conn, 404, &amp;#34;not found&amp;#34;) end end # filename: lib/my_firmware/console_socket.</description><content>&lt;h1 id="tldr">TLDR&lt;/h1>
&lt;p>Here&amp;rsquo;s the code you probably want. Modify it as you see fit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># filename: lib/my_firmware/endpoint.ex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyFirmware.Endpoint&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">Plug.Router&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plug(&lt;span style="color:#a6e22e">Plug.Static&lt;/span>, &lt;span style="color:#e6db74">from&lt;/span>: &lt;span style="color:#e6db74">:my_firmware&lt;/span>, &lt;span style="color:#e6db74">at&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/public&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plug(&lt;span style="color:#e6db74">:match&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plug(&lt;span style="color:#e6db74">:dispatch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> get &lt;span style="color:#e6db74">&amp;#34;/console&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> html &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;!DOCTYPE html PUBLIC&amp;#34;-//W3C//DTD XHTML 1.0 Strict//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;meta content=&amp;#34;text/html;charset=utf-8&amp;#34; http-equiv=&amp;#34;Content-Type&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;meta content=&amp;#34;utf-8&amp;#34; http-equiv=&amp;#34;encoding&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/public/app.css&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;div id=&amp;#34;terminal&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;script src=&amp;#34;/public/app.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_resp(conn, &lt;span style="color:#ae81ff">200&lt;/span>, html)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> match _ &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_resp(conn, &lt;span style="color:#ae81ff">404&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># filename: lib/my_firmware/console_socket.ex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyFirmware.ConsoleSocket&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Simple Websocket handler that starts an embedded iex console
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Tells the compiler we implement the `cowboy_websocket`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># behaviour. This will give warnings if our&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># return types are notably incorrect or if we forget to implement a function.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># FUN FACT: when you `use MyAppWeb, :channel` in your normal Phoenix channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># implementations, this is done under the hood for you.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#e6db74">:cowboy_websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># entry point of the websocket socket.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># WARNING: this is where you would need to do any authentication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># and authorization. Since this handler is invoked BEFORE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># our Phoenix router, it will NOT follow your pipelines defined there.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># WARNING: this function is NOT called in the same process context as the rest of the functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># defined in this module. This is notably dissimilar to other gen_* behaviours.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#e6db74">:cowboy_websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> init(req, opts), &lt;span style="color:#e6db74">do&lt;/span>: {&lt;span style="color:#e6db74">:cowboy_websocket&lt;/span>, req, opts}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># as long as `init/2` returned `{:cowboy_websocket, req, opts}`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># this function will be called. You can begin sending packets at this point.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We&amp;#39;ll look at how to do that in the `websocket_handle` function however.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># This function is where you might want to implement `Phoenix.Presence`, schedule an `after_join` message etc.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#e6db74">:cowboy_websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> websocket_init(_) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, tty} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ExTTY&lt;/span>&lt;span style="color:#f92672">.&lt;/span>start_link([&lt;span style="color:#e6db74">handler&lt;/span>: self()])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {[], %{&lt;span style="color:#e6db74">tty&lt;/span>: tty}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># `websocket_handle` is where data from a client will be received.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># a `frame` will be delivered in one of a few shapes depending on what the client sent:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># :ping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># :pong&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># {:text, data}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># {:binary, data}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Similarly, the return value of this function is similar:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># {[reply_frame1, reply_frame2, ....], state}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># where `reply_frame` is the same format as what is delivered.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#e6db74">:cowboy_websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> websocket_handle(frame, state)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># :ping is not handled for us like in Phoenix Channels.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We must explicitly send :pong messages back.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> websocket_handle(&lt;span style="color:#e6db74">:ping&lt;/span>, state), &lt;span style="color:#e6db74">do&lt;/span>: {[&lt;span style="color:#e6db74">:pong&lt;/span>], state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># a message was delivered from a client. Here we handle it by just echoing it back&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># to the client.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> websocket_handle({&lt;span style="color:#e6db74">:text&lt;/span>, message}, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ExTTY&lt;/span>&lt;span style="color:#f92672">.&lt;/span>send_text(state&lt;span style="color:#f92672">.&lt;/span>tty, message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {[], state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># This function is where we will process all *other* messages that get delivered to the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># process mailbox. This function isn&amp;#39;t used in this handler.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#e6db74">:cowboy_websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> websocket_info(info, state)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> websocket_info({&lt;span style="color:#e6db74">:tty_data&lt;/span>, data}, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {[{&lt;span style="color:#e6db74">:text&lt;/span>, data}], state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// filename: priv/static/app.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xterm/css/xterm.css&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Terminal&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;xterm&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>window.&lt;span style="color:#a6e22e">onload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#f92672">=&lt;/span> window.&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">hostname&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> window.&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">port&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">term&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Terminal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">term&lt;/span>.&lt;span style="color:#a6e22e">open&lt;/span>(document.&lt;span style="color:#a6e22e">getElementById&lt;/span>( &lt;span style="color:#e6db74">&amp;#34;terminal&amp;#34;&lt;/span> ));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create WebSocket connection.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">WebSocket&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;ws://&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/socket&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Connection opened
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;open&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">term&lt;/span>.&lt;span style="color:#a6e22e">onData&lt;/span>((&lt;span style="color:#a6e22e">val&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Listen for messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;message&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">term&lt;/span>.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="embedded-iex-console">Embedded IEx console&lt;/h1>
&lt;p>In Elixir, one of the handiest things at your disposal as a
developer and system maintainer is the IEx console. There are
a million ways to get access to it. You&amp;rsquo;re likely already
famaliar with the classic&lt;/p>
&lt;pre>&lt;code>iex -S mix
&lt;/code>&lt;/pre>
&lt;p>You can of course also use Erlang distribution:&lt;/p>
&lt;pre>&lt;code>iex -name console@localhost -cookie democookie --remsh app@localhost
&lt;/code>&lt;/pre>
&lt;p>But did you know it can also be accessed in other ways? For
example, you could make the console accessable via SSH. We
already do this for you with Nerves, you can check that
out &lt;a href="https://github.com/nerves-project/nerves_ssh">here&lt;/a>.&lt;/p>
&lt;p>In this post, I&amp;rsquo;ll describe how to embed your own console. This can be tunneled
however you want, but the example provided will be tunneled over a standard http server.&lt;/p>
&lt;h2 id="the-building-blocks">The Building Blocks&lt;/h2>
&lt;p>As is customary around these parts, we aren&amp;rsquo;t going to write much code. Just glue it together.
First up, we&amp;rsquo;ll need a handful of dependencies. Add these to &lt;code>mix.exs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">:plug_cowboy&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;~&amp;gt; 2.0&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">:extty&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;~&amp;gt; 0.2&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m sure you&amp;rsquo;ve heard of Plug and Cowboy before, but &lt;code>extty&lt;/code> may be new to you. In short,
it&amp;rsquo;s what allows creating a shell so easily. It implements a simple process-based API for
hosting the IEx console. Full docs can be found &lt;a href="https://github.com/jjcarstens/extty">here&lt;/a>.&lt;/p>
&lt;h2 id="the-glue-code">The Glue Code&lt;/h2>
&lt;p>Somewhere in your supervision tree, add the following child:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># filename: lib/application.ex or similar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#a6e22e">Plug.Cowboy&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">scheme&lt;/span>: &lt;span style="color:#e6db74">:http&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">plug&lt;/span>: &lt;span style="color:#a6e22e">Elias.Testing.Endpoint&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">dispatch&lt;/span>: dispatch(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">options&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">port&lt;/span>: &lt;span style="color:#ae81ff">4001&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">dispatch&lt;/span>: dispatch()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And of course, here&amp;rsquo;s that &lt;code>dispatch()&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> dispatch &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:_&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;/socket&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">MyFirmware.ConsoleSocket&lt;/span>, []},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:_&lt;/span>, &lt;span style="color:#a6e22e">Plug.Cowboy.Handler&lt;/span>, {&lt;span style="color:#a6e22e">MyFirmware.Endpoint&lt;/span>, []}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After putting it all together you should see:&lt;/p>
&lt;p>&lt;img alt="iex-console" src="https://cone.codes/iex-in-a-box/iex-console.png">&lt;/p></content></item><item><title>Automtatically Validating Nerves Firmware</title><link>https://cone.codes/posts/auto-validate-nerves-firmware/</link><pubDate>Wed, 19 Jan 2022 08:42:31 -0700</pubDate><guid>https://cone.codes/posts/auto-validate-nerves-firmware/</guid><description>TLDR Here&amp;rsquo;s the code you probably want. Modify it as you see fit.
# Copyright 2022 Connor Rigby # # Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description><content>&lt;h1 id="tldr">TLDR&lt;/h1>
&lt;p>Here&amp;rsquo;s the code you probably want. Modify it as you see fit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Copyright 2022 Connor Rigby&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># you may not use this file except in compliance with the License.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># You may obtain a copy of the License at&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># http://www.apache.org/licenses/LICENSE-2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Unless required by applicable law or agreed to in writing, software&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># See the License for the specific language governing permissions and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># limitations under the License.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyFirmware.Validator&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Validates the currently running firmware as soon as
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> the device connects to NervesHub. This is implemented
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> via setting a callback in `:heart`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Validation is implemented by polling certain functions,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> namely: `NervesHubLink.connected?()`. It is given
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 5 minutes to connect. If it does not connect, the `:heart`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> module will reboot the device via `nerves_heart`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> All the code in this module must be **VERY SAFE** a crash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> will cause the device to reboot.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">GenServer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">require&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 5 minutes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@nerves_hub_timeout_ms&lt;/span> &lt;span style="color:#ae81ff">300_000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># shoudl be started in a supervisor spec&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@doc&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> start_link(args, opts \\ [&lt;span style="color:#e6db74">name&lt;/span>: __MODULE__]) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>start_link(__MODULE__, args, opts)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">GenServer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> terminate(_, _) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:heart&lt;/span>&lt;span style="color:#f92672">.&lt;/span>clear_callback()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@doc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> This is the `:heart` callback entrypoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> heart(pid \\ __MODULE__) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safe_call(pid, &lt;span style="color:#e6db74">:heart&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> safe_call(pid, call) &lt;span style="color:#f92672">when&lt;/span> is_pid(pid) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">Process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>alive?(pid) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GenServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>call(pid, call)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type, error &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {&lt;span style="color:#e6db74">:error&lt;/span>, {type, error}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:error&lt;/span>, &lt;span style="color:#e6db74">:not_alive&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> safe_call(server, call) &lt;span style="color:#f92672">when&lt;/span> is_atom(server) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> pid &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>whereis(server) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safe_call(pid, call)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:error&lt;/span>, &lt;span style="color:#e6db74">:no_pid&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> safe_call(unknown, _call) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:error&lt;/span>, {&lt;span style="color:#e6db74">:unknown&lt;/span>, unknown}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">GenServer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> init(args) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nerves_hub_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get(args, &lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, &lt;span style="color:#a6e22e">@nerves_hub_timeout_ms&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nerves_hub_timeout_timer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>send_after(self(), &lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, nerves_hub_timeout)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Add other timers here in the same format&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">timers&lt;/span>: %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">nerves_hub_timeout&lt;/span>: nerves_hub_timeout_timer,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">GenServer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_call(&lt;span style="color:#e6db74">:heart&lt;/span>, _from, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timers &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new(state&lt;span style="color:#f92672">.&lt;/span>timers, &lt;span style="color:#66d9ef">fn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {name, &lt;span style="color:#e6db74">:ok&lt;/span>} &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {name, &lt;span style="color:#e6db74">:ok&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {name, timer} &lt;span style="color:#f92672">when&lt;/span> is_reference(timer) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> evaluate_timer(name, timer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {name, value} &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {name, value}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">timers&lt;/span>: timers}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failed &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>any?(timers, &lt;span style="color:#66d9ef">fn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {_name, &lt;span style="color:#66d9ef">true&lt;/span>} &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {_name, _result} &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> failed &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>error(&lt;span style="color:#e6db74">&amp;#34;Heart callback failed. Firmware will revert soon&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:reply&lt;/span>, &lt;span style="color:#e6db74">:fail&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># all checks passed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:reply&lt;/span>, &lt;span style="color:#e6db74">:ok&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">GenServer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_info(&lt;span style="color:#e6db74">:initialize_heart&lt;/span>, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:heart&lt;/span>&lt;span style="color:#f92672">.&lt;/span>set_callback(__MODULE__, &lt;span style="color:#e6db74">:heart&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, state}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> handle_info(&lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, state) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>warn(&lt;span style="color:#e6db74">&amp;#34;Timeout connecting to NervesHub. Firmware should not be considered valid&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:noreply&lt;/span>, %{state &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">timers&lt;/span>: %{state&lt;span style="color:#f92672">.&lt;/span>timers &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">nerves_hub_timeout&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>}}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Timer already expired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> evaluate_timer(name, &lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {name, &lt;span style="color:#66d9ef">true&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> evaluate_timer(&lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, timer) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">NervesHubLink&lt;/span>&lt;span style="color:#f92672">.&lt;/span>connected?() &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>cancel_timer(timer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># this is what we&amp;#39;ve all been waiting for!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Nerves.Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>validate_firmware()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, &lt;span style="color:#e6db74">:ok&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, timer}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type, error &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>error(&lt;span style="color:#e6db74">&amp;#34;Failed to check nerves_hub_timeout: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>inspect({type, error})&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:nerves_hub_timeout&lt;/span>, timer}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="why-when-and-how">Why, When and How&lt;/h1>
&lt;p>With Nerves, you get this fancy A/B partition scheme. You can think of it as
analogous to blue/green deploys of web applications. How this works internally
is subject for another post as it differes per device. In the case of this post,
all you will need to know is that if we don&amp;rsquo;t call a special function, upon the
next reboot, the device will revert to it&amp;rsquo;s previous firmware.&lt;/p>
&lt;h2 id="why-have-a-system-to-auto-revert-firmware">Why have a system to auto revert firmware?&lt;/h2>
&lt;p>To start out, it may be useful to understand &lt;em>why&lt;/em> this setup exists. Imagine if
you will, you have a fleet of devices in production. What they do is not important,
but if you&amp;rsquo;re creative, you may pretend they do something cool. If you&amp;rsquo;re not creative,
just assume that a broken firmware means you have to personally go out and fix any device
personally. This is your motivation.&lt;/p>
&lt;p>The general idea is that if your device is online, and able to download a new update,
it&amp;rsquo;s in a &amp;ldquo;valid&amp;rdquo; state. Say the device is on firmware &lt;code>A&lt;/code>. It was the first version of
the firmware you wrote. It has bugs, but those aren&amp;rsquo;t important as you can just fix them
with an update. Firmware &lt;code>A&lt;/code> is good enough to get you connected to a central Firmware
Update Server. (say for example &lt;a href="https://nerves-hub.org">Nerves Hub&lt;/a>)
Since this was the first firmware, it&amp;rsquo;s automatically considered &lt;code>valid&lt;/code>.
Now that firmware &lt;code>A&lt;/code> is deployed to your fleet of devices, you &lt;strong>really&lt;/strong> don&amp;rsquo;t want
an update to break them. This is where the auto revert system comes in. When you
finally get around to fixing those bugs, you can use the Firmware Update Server
to dispatch your update to the devices, but you want to be really sure that they
are at least as not broken as they started out before the update.&lt;/p>
&lt;p>When an update is downloaded, it will be applied to the &lt;code>B&lt;/code> partition, and the device
will attempt to boot from that partition after the update completes. When it does,
there are some conditions that need to be met before considering the new firmware
as &lt;code>valid&lt;/code>.&lt;/p>
&lt;h2 id="when-is-a-firmware-considered-valid">When is a firmware considered valid?&lt;/h2>
&lt;p>The short answer is of course it depends.&lt;/p>
&lt;p>The short answer that is probably most useful to you is that if your devices can
receive further updates, it&amp;rsquo;s what i like to call &lt;code>valid enough&lt;/code>.&lt;/p>
&lt;p>The long answer is as follows:&lt;/p>
&lt;p>You ultimately need to decide what makes your firmware &lt;code>valid&lt;/code>. The code provided in
the above example simply assumes that connecting to NervesHub is what makes it &lt;code>valid&lt;/code>.
Your use case will probably differ depending on what the device does. For example,
some common other checks include connecting to your own networks, APIs etc.&lt;/p>
&lt;p>If your device connects to your Firmware Update Server, but doesn&amp;rsquo;t perform it&amp;rsquo;s
core functionality, maybe that shouldn&amp;rsquo;t be considered &lt;code>valid&lt;/code>.&lt;/p>
&lt;h1 id="how-to-validate-a-firmware">How to validate a firmware?&lt;/h1>
&lt;p>Naturally, the answer to this question is it depends yet again. However, the example
above is of course already implemented, so that&amp;rsquo;s &lt;code>how&lt;/code> you&amp;rsquo;re gonna do it. The point
here is that this is not the &lt;strong>only&lt;/strong> way to validate a firmware. It&amp;rsquo;s just one I
and at least a couple other production projects work.&lt;/p>
&lt;p>The main system we will be working with here is called &lt;code>heart&lt;/code>. It&amp;rsquo;s an
underappreciated system in the Erlang Runtime System with almost no documentation.
(as is customary for the most useful parts of ERTS)&lt;/p>
&lt;p>What you need to know is that there&amp;rsquo;s a module called &lt;code>:heart&lt;/code> that gets started very early
in the boot process. Nerves implements a custom process (&lt;a href="https://github.com/nerves-project/nerves_heart">source&lt;/a>)
to keep &lt;code>:heart&lt;/code> and your devices watchdog in sync. This means that if Erlang (read: your firmware)
or the device watchdog becomes unresponsive, the device will reboot. The special part about
that, is that if your firmware was not validated, the reboot will revert back to the last
valid firmware, protecting you, the developer from having to fix devices manually.&lt;/p>
&lt;p>So how do you use it? there are a couple functions you will need to know about. The glue between
them is really up to you, but the example at the beginning provides a basic implementation
you can use and modify to suit your own needs.&lt;/p>
&lt;p>The first useful function is &lt;code>:heart.set_callback/2&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">:heart&lt;/span>&lt;span style="color:#f92672">.&lt;/span>set_callback(&lt;span style="color:#a6e22e">SomeModuleThatKnowsHowToValidateFirmware&lt;/span>, &lt;span style="color:#e6db74">:function_to_call&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This callback will be called every &lt;code>HEART_BEAT_TIMEOUT&lt;/code>. By default this is once
every 60 seconds.&lt;/p>
&lt;p>The other useful function you will need is &lt;code>Nerves.Runtime.validate_fw/0&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Nerves.Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>validate_fw()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example, we wrap both of these functions up inside a GenServer
process. this process will be started during our firmware&amp;rsquo;s application supervision
tree startup. I put it at the very end so that firmware can only be validated if everything
else is &amp;ldquo;up and running&amp;rdquo; whatever that means for the application.
That process schedules some timers that once expired will consider the firmware &amp;ldquo;invalid&amp;rdquo;.
The whole trick here is that your device will not be connected immediately since the network
takes time to come up. The timer essentially says that&lt;/p>
&lt;pre>&lt;code>upon a reboot, if the device hasn't connected to the firmware update server in
the allowed amount of time (5 minutes in this case), the firmware should be reverted.
&lt;/code>&lt;/pre>
&lt;p>The other thing to note here is that any crash, exception, error etc will be considered a failure.
(and cause a reboot) This means you should think about how the process interacts and introspects the
rest of the system.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Hopefully this at least gets you thinking about how to recover from failure &lt;strong>before&lt;/strong>
you end up failing with no escape route.&lt;/p>
&lt;p>Deploying firmware to production devices has quite a few things like this that you may not
even be considering. Stay tuned for more on deploying your firmware to production&lt;/p></content></item></channel></rss>