<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zig on cone.codes</title><link>https://cone.codes/tags/zig/</link><description>Recent content in Zig on cone.codes</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Creative Commons Attribution 4.0 International</copyright><lastBuildDate>Thu, 03 Feb 2022 20:02:05 -0700</lastBuildDate><atom:link href="https://cone.codes/tags/zig/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Zig to Build Native Lua Scripts</title><link>https://cone.codes/posts/using-zig-to-build-native-lua-scripts/</link><pubDate>Thu, 03 Feb 2022 20:02:05 -0700</pubDate><guid>https://cone.codes/posts/using-zig-to-build-native-lua-scripts/</guid><description>Using Zig to build Native Lua Scripts I&amp;rsquo;ve been playing with Zig a lot lately. It&amp;rsquo;s one of my favorite pieces of tech I&amp;rsquo;ve found in the last few years. One of my favorite features is how easy it is to compile C libraries with it. Of course when I think &amp;ldquo;C libraries&amp;rdquo;, the first that comes to mind is Lua.
Lua is a really cool &amp;ldquo;embeddable&amp;rdquo; progrramming language. It&amp;rsquo;s made to be put &amp;ldquo;inside&amp;rdquo; larger projects primarily.</description><content>&lt;h1 id="using-zig-to-build-native-lua-scripts">Using Zig to build Native Lua Scripts&lt;/h1>
&lt;p>I&amp;rsquo;ve been playing with &lt;a href="https://ziglang.org/">Zig&lt;/a> a lot lately.
It&amp;rsquo;s one of my favorite pieces of tech I&amp;rsquo;ve found in
the last few years. One of my favorite features is how easy it
is to compile C libraries with it. Of course
when I think &amp;ldquo;C libraries&amp;rdquo;, the first that comes to mind is &lt;code>Lua&lt;/code>.&lt;/p>
&lt;p>Lua is a really cool &amp;ldquo;embeddable&amp;rdquo; progrramming language. It&amp;rsquo;s
made to be put &amp;ldquo;inside&amp;rdquo; larger projects primarily. Some examples
of things that use Lua include&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://love2d.org/">LÃ–VE&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/resources/wiki/modules/lua/">Nginx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wowwiki-archive.fandom.com/wiki/Lua">World of Warcraft&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>So of course, to run in so many places, Lua itself has been built
from the ground up to be &amp;ldquo;embedded&amp;rdquo;. It is distributed as an archive
C source files and documentation. This is great news for us with Zig,
since &lt;a href="https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html">Zig is a c compiler&lt;/a>!&lt;/p>
&lt;p>Getting Lua to compile inside a Zig project is &lt;em>really&lt;/em> easy! easier than
C/C++ in my opinion. I&amp;rsquo;ll glaze the details, plucking the important parts&lt;/p>
&lt;p>First, in &lt;code>build.zig&lt;/code>, we need to link libc, and add it&amp;rsquo;s source files.
This looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zig" data-lang="zig">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> exe &lt;span style="color:#f92672">=&lt;/span> b.addExecutable(&lt;span style="color:#e6db74">&amp;#34;wrapper&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wrapper.zig&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exe.setTarget(target);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exe.setBuildMode(mode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exe.linkLibC();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exe.addIncludeDir(&lt;span style="color:#e6db74">&amp;#34;lua-5.3.4/src&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> lua_c_files &lt;span style="color:#f92672">=&lt;/span> [_][]&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lapi.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lauxlib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lbaselib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lbitlib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lcode.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lcorolib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lctype.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ldblib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ldebug.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ldo.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ldump.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lfunc.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lgc.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;linit.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;liolib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;llex.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lmathlib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lmem.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;loadlib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lobject.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lopcodes.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;loslib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lparser.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lstate.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lstring.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lstrlib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ltable.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ltablib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ltm.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lundump.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lutf8lib.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lvm.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;lzio.c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(target.os_tag &lt;span style="color:#f92672">==&lt;/span> std.Target.Os.Tag.windows) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> c_flags &lt;span style="color:#f92672">=&lt;/span> [_][]&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-std=c99&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-O2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DLUA_USE_WINDOWS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (lua_c_files) &lt;span style="color:#f92672">|&lt;/span>c_file&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exe.addCSourceFile(&lt;span style="color:#e6db74">&amp;#34;lua-5.3.4/src/&amp;#34;&lt;/span> &lt;span style="color:#f92672">++&lt;/span> c_file, &lt;span style="color:#f92672">&amp;amp;&lt;/span>c_flags);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> c_flags &lt;span style="color:#f92672">=&lt;/span> [_][]&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-std=c99&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-O2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DLUA_USE_POSIX&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (lua_c_files) &lt;span style="color:#f92672">|&lt;/span>c_file&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exe.addCSourceFile(&lt;span style="color:#e6db74">&amp;#34;lua-5.3.4/src/&amp;#34;&lt;/span> &lt;span style="color:#f92672">++&lt;/span> c_file, &lt;span style="color:#f92672">&amp;amp;&lt;/span>c_flags);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exe.install();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s really it! It even adds support for Windows. All that&amp;rsquo;s
left is to just use it. This works like any other C library with Zig.
For this project, I decided I would make a single executable out of a
Lua script. Here&amp;rsquo;s the source of the Lua script to give additional context:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;press Y&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> input &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span>(input &lt;span style="color:#f92672">~=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;y&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> input &lt;span style="color:#f92672">~=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Y&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input &lt;span style="color:#f92672">=&lt;/span> io.read(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;ðŸ¥§&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So all the Zig code needs to do is somehow &amp;ldquo;embed&amp;rdquo; that script, and execute it
inside of the Lua VM. Lua offers a &lt;code>luac&lt;/code> executable to compile a script file
into a chunk of Lua bytecode that can then be executed. This isn&amp;rsquo;t strictly
necessary, but i compiled the &lt;code>luac&lt;/code> executable with Zig:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make -C lua-5.3.4/ generic CC&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zig cc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next I compiled my script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./lua-5.3.4/src/luac main.lua
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which outputs a &lt;code>luac.out&lt;/code> file. This itself obviously isn&amp;rsquo;t an executable tho.
Luckily, Zig has a built-in for us to use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zig" data-lang="zig">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> LUA_BYTECODE &lt;span style="color:#f92672">=&lt;/span> @embedFile(&lt;span style="color:#e6db74">&amp;#34;luac.out&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, all that&amp;rsquo;s left is to execute the bytecode with &lt;code>lua_pcallk&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zig" data-lang="zig">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> lua &lt;span style="color:#f92672">=&lt;/span> @cImport({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @cInclude(&lt;span style="color:#e6db74">&amp;#34;lua.h&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @cInclude(&lt;span style="color:#e6db74">&amp;#34;lualib.h&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @cInclude(&lt;span style="color:#e6db74">&amp;#34;lauxlib.h&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> main() &lt;span style="color:#66d9ef">anyerror&lt;/span>&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> lua.luaL_newstate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lua.luaL_openlibs(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> load_status &lt;span style="color:#f92672">=&lt;/span> lua.luaL_loadbufferx(s, LUA_BYTECODE, LUA_BYTECODE.len, &lt;span style="color:#e6db74">&amp;#34;main.lua&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;bt&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (load_status &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std.log.info(&lt;span style="color:#e6db74">&amp;#34;Couldn&amp;#39;t load lua bytecode: {s}&amp;#34;&lt;/span>, .{lua.lua_tolstring(s, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">null&lt;/span>)});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> call_status &lt;span style="color:#f92672">=&lt;/span> lua.lua_pcallk(s, &lt;span style="color:#ae81ff">0&lt;/span>, lua.LUA_MULTRET, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (call_status &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std.log.info(&lt;span style="color:#e6db74">&amp;#34;{s}&amp;#34;&lt;/span>, .{lua.lua_tolstring(s, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">null&lt;/span>)});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I tested this out on my arm Mac, an x86 Mac, my Windows PC, WSL, and on several
Linux installations and it works great!&lt;/p>
&lt;p>Compiling is done with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>zig build -Drelease-small -Dtarget&lt;span style="color:#f92672">=&lt;/span>&amp;lt;target&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where target can be one of:&lt;/p>
&lt;ul>
&lt;li>&lt;code>x86_64-windows&lt;/code>&lt;/li>
&lt;li>&lt;code>x86_64-macos&lt;/code>&lt;/li>
&lt;li>&lt;code>aarch64-macos&lt;/code>&lt;/li>
&lt;li>&lt;code>aarch64-linux-musl&lt;/code>&lt;/li>
&lt;li>&lt;code>x86_64-linux-musl&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m sure there are other targets that work, but those are the ones
I tested.&lt;/p>
&lt;p>All the source for this project is &lt;a href="https://github.com/ConnorRigby/zig-lua-wrapper">On Github&lt;/a>
I also uploaded precompiled binaries to Github as well: &lt;a href="https://github.com/ConnorRigby/zig-lua-wrapper/releases/tag/22-2-3">Here&lt;/a>.&lt;/p></content></item></channel></rss>